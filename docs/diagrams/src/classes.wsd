@startuml
skinparam stereotypeCBackgroundColor YellowGreen

skinparam class {
    BackgroundColor<<Important>> White
    BackgroundColor<<SuperImportant>> White
    BorderColor<<Important>> Blue
    BorderColor<<SuperImportant>> Red
}

abstract class GameObject <<SuperImportant>>  {
    id : int
    position_x : int
    position_y : int
    position_z : int
    ___
    get_position_x : unit -> int
    get_position_y : unit -> int
    get_position_z : unit -> int
}

class Tile <<SuperImportant>> {
    type : TerrainType
    grid : Grid
    movement_cost : int
    ___
    is_hidden : Faction -> bool
}
Grid "1" -up- "0..n" Tile


abstract class TerrainType <<Important>> {
    biome : Biome
    natural_feature : NaturalFeature
    ___
    get_biome : unit -> Biome
    get_natural_feature : unit -> NaturalFeature
}
Biome "1" *-up- TerrainType
NaturalFeature "0..1" *-up- TerrainType


abstract class Infrastructure <<Important>> {
    destroyed : bool
    ___
    is_destroyed : unit -> bool
}

note bottom of Infrastructure
    Units that cannot move. Each
    owned infrastructure allow
    the faction to produce
    unit faster
end note

Infrastructure <|-- City
class City <<Important>> {
    accumulated_production : int
    is_producing : bool
    producing : Produceable
    ___
    continue_production : unit -> unit
    finish_production : unit -> Produceable
}

note bottom of City
    City is the basic
    infrastructure each faction
    starts with.
    It can produce Infantry.
    If it is destoyed, the faction
    loses and can no longer
    produce unit
end note

abstract class Facility {

}
note bottom of Facility
    Facilities are neutral
    structures that can be captured
    by a faction.
    When captured, it can
    allows cities to produce
    different type of units or item.
end note

Entity <|-- Produceable
abstract class Produceable <<SuperImportant>> {
    produced_by : City
    production_cost : int
}

abstract class Entity <<SuperImportant>> {
    health : int
    armor : int
    can_attack : bool
    can_move : bool
    action_point : int
    current_action_point : int
    attack_strength : int
    defense_strength : int
    attack_range : int
    item_list : Item list
    possible_action : Action list
    action_on_start : Action list
    faction : Faction
    ___
    get_health : unit -> int
    get_attack_strength : unit -> int
    get_defense_strength : unit -> int
    get_attack_range : unit -> int
    get_item_list : unit -> Item list
    get_faction : unit -> Faction
    execute_action_on_start : unit -> unit
    add_action_on_start : Action -> unit
}
Item "0..1" -up- "1" Entity
Behaviour "1" *-up- Entity
Action "0..n" *-up- Entity

interface SpecialUnit {

}
note bottom of SpecialUnit
    Special unit
    are very strong unit that can
    only be built by a particular
    faction provided they
    control a tech lab
end note

class LevitatingBattleship {

}
note bottom of LevitatingBattleship
    Artillery that has
    superior range and
    stronger armor, but
    limited movement
    points
end note

class HunterKillerDroneSwarm {

}
note bottom of HunterKillerDroneSwarm
    Melee unit that can
    attack twice in a
    turn and is strong
    against infantries
    unit but is very weak against Armored
end note

class GiantDeathRobot {

}
note bottom of GiantDeathRobot
    Tank unit that has
    bonus armor and health
end note

class OrbitalCannon {

}
note bottom of OrbitalCannon
    Weaponized satellite
    over the
    orbit of earth.
    instantly kill any
    units beneath it and
    cannot be attacked but
    can only move randomly
    towards the enemy
end note

Produceable <|-- Ground
abstract class Ground <<SuperImportant>> {

}


Produceable <|-- Air
abstract class Air {

}

abstract class Melee <<SuperImportant>> {

}
note bottom of Melee
    Melee units take damage
    when attacking other
    units
end note

class Soldier <<SuperImportant>> {

}
note bottom of Soldier
    Basic cheap unit.
    Strong against AntiArmored
end note

class Sniper <<<Important>> {

}
note bottom of Sniper
    Basic ranged unit. Weak defense
    and strong attack
end note

class Tank {

}
note bottom of Tank
    Armored melee unit.
    Can cover greater
    distances.
    Strong against Infantry.
    Weak defense
end note

Infantry <.. AntiArmored
class AntiArmored {

}
note bottom of AntiArmored
    Counter melee unit.
    Weak against soldiers.
    Strong against
    armored and deal
    damage directly
    to health
end note

class AntiAir {

}
note bottom of AntiAir
    Counter armored unit.
    Very weak against Ground
    and very strong against
    Air
end note

class Artillery {
    setup : bool
    __
    get_setup : unit -> bool
    set_setup : unit -> bool
}
note bottom of Artillery
    Armored ranged unit.
    Stronger attack strength
    but requires to be set up
    before being able to fire
end note

abstract class Ranged <<Important>> {

}
note bottom of Ranged
    Ranged unit do not
    take damage
    when attacking
end note


class FighterJet {

}
note bottom of FighterJet
    Standard air unit.
    Strong against other air units.
end note

class Bomber {

}
note bottom of Bomber
    Air unit.
    Slower, but
    more attack strength
    and weak defense
end note

abstract class Item <<Important>> {
    value : int
    current_owner : Produceable
    ___
    get_owner : unit -> Produceable
}

note bottom of Item
    Item are spread throughout
    the map and can be bicked up
    by ground units. Upon death of
    any unit that was holding it,
    it is dropped on the map at
    the same position
end note

class NuclearBomb {

}
note bottom of NuclearBomb
    Upon activation, will launch
    a nuclear bomb
    in a 2 tile radius from
    the unit that activates it.
    It destroy everything in a 1
    tile radius and leave
    a Fallout for the remainder
    of the game
end note



class TitaniumArmor <<Important>>{
    damage_reduction : int
    ___
    get_damage_reduction : unit -> int
}

note bottom of TitaniumArmor
    Reduces every
    damage taken by
    a certain percentage
end note

class StimPacks <<Important>> {
    heal_value : int
    ___
    get_heal_value : unit -> int
}

note bottom of StimPacks
    Upon activation,
    heals the
    unit that is
    holding it
end note

class PassiveBonusItem <<Important>> {

}

note bottom of PassiveBonusItem
    Passive bonus item are
    item that provies passive
    bonus to the unit that
    is holding it. The bonus
    is applied as long
    as the unit that is
    holding it is alive
end note


class ActiveBonusItem <<Important>> {

}

note bottom of ActiveBonusItem
    Active bonus item are item
    that provides active bonus.
    When held, they do nothing,
    they must be activate in
    order to do something
end note

class Cursor <<SuperImportant>>{
    hidden : bool
    selected_entity : Entity
    selected_action_type : ActionType
}
note bottom of Cursor
    Example of how the cursor can be used :
    when behaviour is called upon an entity, 
    creates a cursor on top of it. it has
    the same coordinates. however it is not tied to it.
    once the cursor is over an entity,
    the user will press enter, the entity will
    then be binded with the cursor.
    the user can then either select an action to do,
    or press escape. If escape is pressed, the entity is no longer
    binded with the cursor.
    if an action is selected, that action is binded.
    depending on the action then cursor
    will have to select a tile of target,
    or none.
end note

abstract class Biome  <<Important>>{

}

note bottom of Biome
    Biome depicts the visual
    look of a cell.
    Some faction
    fight better or
    worse on some
    biome
end note

class Grassland  <<Important>>{

}

class Desert {

}

class Snow {

}

class Airport {

}

class Factory {

}

class NuclearFoundry {

}

class TechLab {

}
note bottom of TechLab
    Tech lab overrides
    the requirement
    for special units.
    For example, if
    American Megacorp
    controls a tech lab
    but no airport,
    they can still
    make the orbital
    cannon, but
    they won't be able
    to build fighters
end note

abstract class ImpassableFeature {

}
note bottom of ImpassableFeature
    Nothing can be on
    impassable feature
end note

abstract class RoughFeature {
}
note bottom of RoughFeature
    Rough feature takes
    all movement points
    to move to
end note

class Mountain {

}
note bottom of Mountain
    Block ranged attacks
end note

class Lake {

}
note bottom of Lake
    Do not block
    ranged attacks
end note

class Forest {

}
note bottom of Forest
    Stronger attack
    if attacking from a
    Forest
end note

class Hill {

}
note bottom of Hill
    Stronger defense
    if attacked on
    a hill
end note

class Fallout {

}
note bottom of Fallout
    Every unit
    take damage
    when starting
    the turn on top of
    a fallout
end note


abstract class NaturalFeature {

}

interface Infantry {

}

interface Armored {

}

class Grid  <<SuperImportant>>{
    cells : Tile array array array
    height : int
    width : int
    entities_status : ((int * int * int) * Entity)
    ___
    get_cell_at : int -> int -> Tile
    set_cell_at : int -> int -> Tile -> unit
    get_entity_at : int -> int -> Entity
}
note bottom of Grid
    Grid composed of hexagons
end note

abstract class Action  <<SuperImportant>> {
    grid : Grid
    cost : int
    source : x * y * z
    source_air_or_ground : bool
    destination : x * y * z
    destination_air_or_ground : bool
    ___
    get_grid : unit -> Grid
    {abstract} # is_valid : unit -> bool
    {abstract} # execute : unit -> unit
}
note bottom of Action
    The action class manage
    what's happening in the game
    They have the global view
    of the game so that
    they are able
    to interact with any kind
    of object. Each subclass
    determines whether the
    action can be done,
    from who it is done,
    to whom it is done,
    and what is done.
end note

Action <|-- UseItem
abstract class UseItem <<SuperImportant>> {
}

class Setup {

}
note bottom of Setup
    Action for artilerry
    that allows them to
    fire
end note

class Move  <<SuperImportant>>{
}
note bottom of Move
    Move a unit
    from point A to
    B. Distance being
    the number of
    mouvement point
    the unit has left
end note

class Guard {

}
note bottom of Guard
    If 1 move left,
    take a guard stance:
    stronger defense strength
    until next
    turn
end note

abstract class Attack  <<Important>>{
}
note bottom of Attack
    If 1 move left,
    attack the selected unit
    For melee unit
    the unit can only
    attack if the unit
    can move
    to the tile of
    the enemy
end note

class AttackGround  <<Important>>{

}
note bottom of AttackGround
    Attack the enemy of the ground
end note

class AttackAir {

}
note bottom of AttackAir
    Attack the enemy in the air
end note

class PickUp {

}
note bottom of PickUp
    The unit picks up the item
end note

class Produce {

}
note bottom of Produce
    Start production of unit
end note

Action <|-- Spawn
class Spawn {

}
note bottom of Spawn
    Spawn a unit
end note




abstract class Menu  <<SuperImportant>>{

}

class MainMenu  <<SuperImportant>>{

}

class EndMenu  <<SuperImportant>>{

}

class SettingMenu  <<SuperImportant>>{

}

class Behaviour  <<Important>>{
    ___
    choose_action : unit -> Action
}

note bottom of Behaviour
    Chooses the action for the unit
end note

class PlayerInput  <<Important>>{
    cursor : Cursor
}
Cursor "1" *-up- PlayerInput

note bottom of PlayerInput
    The player
    chooses which action to do
end note


class AI  <<Important>>{

}
note bottom of AI
    The computer chooses
    which action to do
end note

abstract class Faction <<SuperImportant>> {
    units : Entity list
    player_faction : bool
    defeated : bool
    ___
    get_number_of_infrastructure : unit -> int
}
Entity "0..n" -- "1" Faction

class AmericanMegacorp {

}
note bottom of AmericanMegacorp
    Faster air units
    production and
    armor take 10% less damage.
    Overall weaker defense
end note

class EuropeanJointTaskForce  <<SuperImportant>>{

}
note bottom of EuropeanJointTaskForce
    Standard Faction
end note

class RussianFederation {

}
note bottom of RussianFederation
    Strong when fighting on snow.
    Weak when fighting on desert
    Tanks are slower but
    deals more damage
end note


class PacificCoastCoalition {

}
note bottom of PacificCoastCoalition
    Faster infantry unit production
    and infantry get bonus
    attack and defense strength
    from adjacent ally
    infantry units.
    Armored and air take
    longer to produce
end note

class TRPG <<SuperImportant>> {
    current_menu : Menu
    game : Game
    ___
    start_game : unit -> unit
    set_menu : Menu -> unit
}
note bottom of TRPG
    This is the main class
    of the game
end note
Game "1" *-right- TRPG
Menu "1" *-right- TRPG

class Game  <<SuperImportant>> {
    setting : Settings
    grid : Grid
    factions : Faction list
    ___
    compute_turn : unit -> unit
}

Faction "1..n" *-up- Game
Settings "1" *-up- Game
Grid "1" *-up- Game

note bottom of Game
    iterate over each factions,
    then iterate over each
    available unit.
    for each unit, first,
    to them all the on start
    action, if they are
    any, then call upon
    their behaviour
    attribute to decide which action
    to do. If the faction is
    controlled by the player,
    his turn will
    end when he hits the
    end turn button
    instead
end note

class Settings  <<Important>>{
    speed : int
}

' Implements
Infantry <|.up. Soldier
Infantry <|.up. Sniper
Armored <|.up. Tank
Armored <|.up. AntiAir
Armored <|.up. Artillery
SpecialUnit <|.up. LevitatingBattleship
SpecialUnit <|.up. HunterKillerDroneSwarm
SpecialUnit <|.up. GiantDeathRobot
SpecialUnit <|.up. OrbitalCannon
' Inheritance
GameObject <|-- Item
GameObject <|-- Tile
GameObject <|-- Entity
GameObject <|-- Cursor
Entity <|-- Infrastructure
Ground <|-- Melee
Ground <|-- Ranged
Ranged <|-- Artillery
Ranged <|-- Sniper
Ranged <|-- AntiAir
Melee <|-- Tank
Melee <|-- AntiArmored
Melee <|-- Soldier
Air <|-- Bomber
Air <|-- FighterJet
Artillery <|-- LevitatingBattleship
Bomber <|-- OrbitalCannon
Melee <|-- HunterKillerDroneSwarm
Tank <|-- GiantDeathRobot
Infrastructure <|-- Facility
NaturalFeature <|-- Fallout
NaturalFeature <|-- ImpassableFeature
NaturalFeature <|-- RoughFeature
ImpassableFeature <|-- Mountain
ImpassableFeature <|-- Lake
RoughFeature <|-- Forest
RoughFeature <|-- Hill
Biome <|-- Desert
Biome <|-- Grassland
Biome <|-- Snow
Facility <|-- Airport
Facility <|-- Factory
Facility <|-- NuclearFoundry
Facility <|-- TechLab
Action <|-- Move
Action <|-- Attack
Action <|-- PickUp
Action <|-- Produce
Action <|-- Guard
Action <|-- Setup
Attack <|-- AttackAir
Attack <|-- AttackGround
Menu <|-- MainMenu
Menu <|-- EndMenu
Menu <|-- SettingMenu
Behaviour <|-- PlayerInput
Behaviour <|-- AI
Item <|-- PassiveBonusItem
Item <|-- ActiveBonusItem
Faction <|-- EuropeanJointTaskForce
Faction <|-- AmericanMegacorp
Faction <|-- PacificCoastCoalition
Faction <|-- RussianFederation
ActiveBonusItem <|-- NuclearBomb
ActiveBonusItem <|-- StimPacks
PassiveBonusItem <|-- TitaniumArmor



' Faction special units
GiantDeathRobot .. EuropeanJointTaskForce : special unit of
HunterKillerDroneSwarm .. PacificCoastCoalition : special unit of
OrbitalCannon .. AmericanMegacorp : special unit of
LevitatingBattleship .. RussianFederation : special unit of

' Facility produce type of units
Armored .. Factory : allow production of
Air .. Airport  : allow production of
SpecialUnit .. TechLab : allow production
NuclearBomb .. NuclearFoundry : allow production

' Package
@enduml